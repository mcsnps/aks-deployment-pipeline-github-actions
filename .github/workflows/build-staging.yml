# This is a basic workflow to help you get started with Actions

name: Build and push the latest build to staging

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
   build_push_image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04    
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        uses: docker/login-action@v3.0.0
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          registry: ${{ secrets.ACR_NAME }}
          # Username used to log against the Docker registry
          username: ${{ secrets.ACR_LOGIN }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push staging images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        uses: docker/build-push-action@v5.0.0
        with:
          # Build's context is the set of files located in the specified PATH or URL
          context: . # optional
          # Push is a shorthand for --output=type=registry
          push: true # optional, default is false
          # List of tags
          tags: ${{ secrets.ACR_NAME }}/contoso-website:latest # optional

   deploy:
      runs-on: ubuntu-20.04
      needs: build_push_image

      steps:
      - uses: actions/checkout@v2

      - name: Install Helm
        uses: Azure/setup-helm@v3
        with:
          # Version of helm
          version: v3.3.1 

      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v3
        with:
          # Resource Group Name
          resource-group: mslearn-gh-pipelines-5060
          # AKS Cluster Name
          cluster-name: contoso-video
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # AKS Cluster Subscription
          #subscription: # optional
          # Get cluster admin credentials. Values: true or false
          #admin: # optional
          # Enables kubelogin for non-admin user scenario. Values: true or false
          #use-kubelogin: # optional


      - name: Run Helm Deploy
        run: |
          helm upgrade \
            --install \
            --create-namespace \
            --atomic \
            --wait \
            --namespace staging \
            contoso-website \
            ./kubernetes/contoso-website \
            --set image.repository=${{ secrets.ACR_NAME }} \
            --set dns.name=${{ secrets.DNS_NAME }}
          
